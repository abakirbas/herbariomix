ggplot(pie_data, aes(x = "", y = Count, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_void() +
theme(
plot.margin = margin(0, 0, 0, 0, "cm"),
legend.position = "none"
) +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5)) +
scale_fill_manual(values = c("Completed" = "#ef8a62", "Remaining" = "#67a9cf"))
}
# Create lists to store the pie charts
species_pie_charts <- list()
specimens_pie_charts <- list()
# Create pie charts for each step
steps <- dat$Step
for (i in 1:length(steps)) {
step <- steps[i]
# Species Pie Charts
species_completed <- dat$`species completed`[i]
species_remaining <- dat$`species remaining`[i]
species_completed_percent <- dat$SpeciesCompletedPercent[i]
species_remaining_percent <- dat$SpeciesRemainingPercent[i]
species_title <- paste(step, "- Species")
species_pie_chart <- create_pie_chart(step, species_completed, species_remaining, species_completed_percent, species_remaining_percent, species_title)
species_pie_charts[[i]] <- species_pie_chart
# Specimens Pie Charts
specimens_completed <- dat$`specimens completed`[i]
specimens_remaining <- dat$`specimens remaining`[i]
specimens_completed_percent <- dat$SpecimensCompletedPercent[i]
specimens_remaining_percent <- dat$SpecimensRemainingPercent[i]
specimens_title <- paste(step, "- Specimens")
specimens_pie_chart <- create_pie_chart(step, specimens_completed, specimens_remaining, specimens_completed_percent, specimens_remaining_percent, specimens_title)
specimens_pie_charts[[i]] <- specimens_pie_chart
}
# Render the plots dynamically in the "Climb Demographics" tab
output$plots_ui_progress <- renderUI({
plot_output_list <- lapply(1:length(species_pie_charts), function(i) {
plotname <- paste("plot_climb", i, sep="")
box(
title = steps[i], status = "primary", solidHeader = TRUE, width = 6,
plotOutput(outputId = plotname, height = 400)
)
})
do.call(fluidRow, plot_output_list)
})
# Render the plots dynamically in the "Send Demographics" tab
output$plots_ui_send_demos <- renderUI({
plot_output_list <- lapply(1:length(specimens_pie_charts), function(i) {
plotname <- paste("plot_send", i, sep="")
box(
title = steps[i], status = "primary", solidHeader = TRUE, width = 6,
plotOutput(outputId = plotname, height = 400)
)
})
do.call(fluidRow, plot_output_list)
})
# Render each plot in the "Climb Demographics" tab
for (i in 1:length(species_pie_charts)) {
local({
my_i <- i
plotname <- paste("plot_climb", my_i, sep="")
output[[plotname]] <- renderPlot({
species_pie_charts[[my_i]]
})
})
}
# Render each plot in the "Send Demographics" tab
for (i in 1:length(specimens_pie_charts)) {
local({
my_i <- i
plotname <- paste("plot_send", my_i, sep="")
output[[plotname]] <- renderPlot({
specimens_pie_charts[[my_i]]
})
})
}
}
shinyApp(ui, server)
## Begin App Build
# Sidebar definition
sidebar <- dashboardSidebar(
width = 250,
sidebarMenu(
menuItem("About", tabName = "about"),
menuItem("Workflow stats", tabName = "stats"),
menuItem("Progress", tabName = "progress")
)
)
# Body definition
body <- dashboardBody(
tabItems(
tabItem(tabName = "about",
h2("About this dashboard..."),
h4("The intent of this dashboard is to track and visualize the progress of Dior Herbariomix project.")
),
tabItem(tabName = "stats",
h2("Progress by each step of the workflow"),
h4(""),
DT::dataTableOutput("data_table")
),
tabItem(tabName = "progress",
h2("Progress"),
uiOutput("plots_ui_progress")
)
)
)
# Combine header, sidebar, and body into the UI
ui <- dashboardPage(
dashboardHeader(title = "Dior Herbariomix Dashboard", titleWidth = 350),
sidebar,
body
)
server <- function(input, output) {
# Load Data upon URL Load
dat <- herbariomix_app %>%
select(Step, 'species completed', 'species remaining', 'specimens completed', 'specimens remaining')%>%
mutate(
SpeciesTotal = `species completed` + `species remaining`,
SpecimensTotal = `specimens completed` + `specimens remaining`,
SpeciesCompletedPercent = round((`species completed` / SpeciesTotal) * 100, 2)
SpeciesRemainingPercent = 100 - SpeciesCompletedPercent,
## Begin App Build
# Sidebar definition
sidebar <- dashboardSidebar(
width = 250,
sidebarMenu(
menuItem("About", tabName = "about"),
menuItem("Workflow stats", tabName = "stats"),
menuItem("Progress", tabName = "progress")
)
)
# Body definition
body <- dashboardBody(
tabItems(
tabItem(tabName = "about",
h2("About this dashboard..."),
h4("The intent of this dashboard is to track and visualize the progress of Dior Herbariomix project.")
),
tabItem(tabName = "stats",
h2("Progress by each step of the workflow"),
h4(""),
DT::dataTableOutput("data_table")
),
tabItem(tabName = "progress",
h2("Progress"),
uiOutput("plots_ui_progress")
)
)
)
# Combine header, sidebar, and body into the UI
ui <- dashboardPage(
dashboardHeader(title = "Dior Herbariomix Dashboard", titleWidth = 350),
sidebar,
body
)
server <- function(input, output) {
# Load Data upon URL Load
dat <- herbariomix_app %>%
select(Step, 'species completed', 'species remaining', 'specimens completed', 'specimens remaining')%>%
mutate(
SpeciesTotal = `species completed` + `species remaining`,
SpecimensTotal = `specimens completed` + `specimens remaining`,
SpeciesCompletedPercent = round((`species completed` / SpeciesTotal) * 100, 2),
SpeciesRemainingPercent = 100 - SpeciesCompletedPercent,
SpecimensCompletedPercent = round((`specimens completed` / SpecimensTotal) * 100, 2),
SpecimensRemainingPercent = 100 - SpecimensCompletedPercent
)
# Get data table
output$data_table <- DT::renderDataTable({
DT::datatable(
dat,
options = list(pageLength = nrow(dat), scrollX = TRUE)
)
})
## Plots
# Function to create pie charts with percentages
create_pie_chart <- function(step, completed, remaining, completed_percent, remaining_percent, title){
pie_data <- data.frame(
Category = c("Completed", "Remaining"),
Count = c(completed, remaining),
Percentage = c(completed_percent, remaining_percent)
) %>%
mutate(Label = paste0(Category, ": ", round(Percentage, 1), "%"))
ggplot(pie_data, aes(x = "", y = Count, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_void() +
theme(
plot.margin = margin(0, 0, 0, 0, "cm"),
legend.position = "none"
) +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5)) +
scale_fill_manual(values = c("Completed" = "#ef8a62", "Remaining" = "#67a9cf"))
}
# Create lists to store the pie charts
species_pie_charts <- list()
specimens_pie_charts <- list()
# Create pie charts for each step
steps <- dat$Step
for (i in 1:length(steps)) {
step <- steps[i]
# Species Pie Charts
species_completed <- dat$`species completed`[i]
species_remaining <- dat$`species remaining`[i]
species_completed_percent <- dat$SpeciesCompletedPercent[i]
species_remaining_percent <- dat$SpeciesRemainingPercent[i]
species_title <- paste(step, "- Species")
species_pie_chart <- create_pie_chart(step, species_completed, species_remaining, species_completed_percent, species_remaining_percent, species_title)
species_pie_charts[[i]] <- species_pie_chart
# Specimens Pie Charts
specimens_completed <- dat$`specimens completed`[i]
specimens_remaining <- dat$`specimens remaining`[i]
specimens_completed_percent <- dat$SpecimensCompletedPercent[i]
specimens_remaining_percent <- dat$SpecimensRemainingPercent[i]
specimens_title <- paste(step, "- Specimens")
specimens_pie_chart <- create_pie_chart(step, specimens_completed, specimens_remaining, specimens_completed_percent, specimens_remaining_percent, specimens_title)
specimens_pie_charts[[i]] <- specimens_pie_chart
}
# Render the plots dynamically in the "Climb Demographics" tab
output$plots_ui_progress <- renderUI({
plot_output_list <- lapply(1:length(species_pie_charts), function(i) {
plotname <- paste("plot_climb", i, sep="")
box(
title = steps[i], status = "primary", solidHeader = TRUE, width = 6,
plotOutput(outputId = plotname, height = 400)
)
})
do.call(fluidRow, plot_output_list)
})
# Render the plots dynamically in the "Send Demographics" tab
output$plots_ui_send_demos <- renderUI({
plot_output_list <- lapply(1:length(specimens_pie_charts), function(i) {
plotname <- paste("plot_send", i, sep="")
box(
title = steps[i], status = "primary", solidHeader = TRUE, width = 6,
plotOutput(outputId = plotname, height = 400)
)
})
do.call(fluidRow, plot_output_list)
})
# Render each plot in the "Climb Demographics" tab
for (i in 1:length(species_pie_charts)) {
local({
my_i <- i
plotname <- paste("plot_climb", my_i, sep="")
output[[plotname]] <- renderPlot({
species_pie_charts[[my_i]]
})
})
}
# Render each plot in the "Send Demographics" tab
for (i in 1:length(specimens_pie_charts)) {
local({
my_i <- i
plotname <- paste("plot_send", my_i, sep="")
output[[plotname]] <- renderPlot({
specimens_pie_charts[[my_i]]
})
})
}
}
shinyApp(ui, server)
shinyApp(ui, server)
server <- function(input, output) {
# Load Data upon URL Load
dat <- herbariomix_app %>%
select(Step, 'species completed', 'species remaining', 'specimens completed', 'specimens remaining')%>%
mutate(
SpeciesTotal = `species completed` + `species remaining`,
SpecimensTotal = `specimens completed` + `specimens remaining`,
SpeciesCompletedPercent = round((`species completed` / SpeciesTotal) * 100, 2),
SpeciesRemainingPercent = round((100 - SpeciesCompletedPercent), 2),
SpecimensCompletedPercent = round((`specimens completed` / SpecimensTotal) * 100, 2),
SpecimensRemainingPercent = 100 - SpecimensCompletedPercent
)
# Get data table
output$data_table <- DT::renderDataTable({
DT::datatable(
dat,
options = list(pageLength = nrow(dat), scrollX = TRUE)
)
})
## Plots
# Function to create pie charts with percentages
create_pie_chart <- function(step, completed, remaining, completed_percent, remaining_percent, title){
pie_data <- data.frame(
Category = c("Completed", "Remaining"),
Count = c(completed, remaining),
Percentage = c(completed_percent, remaining_percent)
) %>%
mutate(Label = paste0(Category, ": ", round(Percentage, 1), "%"))
ggplot(pie_data, aes(x = "", y = Count, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_void() +
theme(
plot.margin = margin(0, 0, 0, 0, "cm"),
legend.position = "none"
) +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5)) +
scale_fill_manual(values = c("Completed" = "#ef8a62", "Remaining" = "#67a9cf"))
}
# Create lists to store the pie charts
species_pie_charts <- list()
specimens_pie_charts <- list()
# Create pie charts for each step
steps <- dat$Step
for (i in 1:length(steps)) {
step <- steps[i]
# Species Pie Charts
species_completed <- dat$`species completed`[i]
species_remaining <- dat$`species remaining`[i]
species_completed_percent <- dat$SpeciesCompletedPercent[i]
species_remaining_percent <- dat$SpeciesRemainingPercent[i]
species_title <- paste(step, "- Species")
species_pie_chart <- create_pie_chart(step, species_completed, species_remaining, species_completed_percent, species_remaining_percent, species_title)
species_pie_charts[[i]] <- species_pie_chart
# Specimens Pie Charts
specimens_completed <- dat$`specimens completed`[i]
specimens_remaining <- dat$`specimens remaining`[i]
specimens_completed_percent <- dat$SpecimensCompletedPercent[i]
specimens_remaining_percent <- dat$SpecimensRemainingPercent[i]
specimens_title <- paste(step, "- Specimens")
specimens_pie_chart <- create_pie_chart(step, specimens_completed, specimens_remaining, specimens_completed_percent, specimens_remaining_percent, specimens_title)
specimens_pie_charts[[i]] <- specimens_pie_chart
}
# Render the plots dynamically in the "Climb Demographics" tab
output$plots_ui_progress <- renderUI({
plot_output_list <- lapply(1:length(species_pie_charts), function(i) {
plotname <- paste("plot_climb", i, sep="")
box(
title = steps[i], status = "primary", solidHeader = TRUE, width = 6,
plotOutput(outputId = plotname, height = 400)
)
})
do.call(fluidRow, plot_output_list)
})
# Render the plots dynamically in the "Send Demographics" tab
output$plots_ui_send_demos <- renderUI({
plot_output_list <- lapply(1:length(specimens_pie_charts), function(i) {
plotname <- paste("plot_send", i, sep="")
box(
title = steps[i], status = "primary", solidHeader = TRUE, width = 6,
plotOutput(outputId = plotname, height = 400)
)
})
do.call(fluidRow, plot_output_list)
})
# Render each plot in the "Climb Demographics" tab
for (i in 1:length(species_pie_charts)) {
local({
my_i <- i
plotname <- paste("plot_climb", my_i, sep="")
output[[plotname]] <- renderPlot({
species_pie_charts[[my_i]]
})
})
}
# Render each plot in the "Send Demographics" tab
for (i in 1:length(specimens_pie_charts)) {
local({
my_i <- i
plotname <- paste("plot_send", my_i, sep="")
output[[plotname]] <- renderPlot({
specimens_pie_charts[[my_i]]
})
})
}
}
shinyApp(ui, server)
## Begin App Build
# Sidebar definition
sidebar <- dashboardSidebar(
width = 250,
sidebarMenu(
menuItem("About", tabName = "about"),
menuItem("Workflow stats", tabName = "stats"),
menuItem("Progress", tabName = "progress")
)
)
# Body definition
body <- dashboardBody(
tabItems(
tabItem(tabName = "about",
h2("About this dashboard..."),
h4("The intent of this dashboard is to track and visualize the progress of Dior Herbariomix project.")
),
tabItem(tabName = "stats",
h2("Progress by each step of the workflow"),
h4(""),
DT::dataTableOutput("data_table")
),
tabItem(tabName = "progress",
h2("Progress"),
uiOutput("plots_ui_progress")
)
)
)
# Combine header, sidebar, and body into the UI
ui <- dashboardPage(
dashboardHeader(title = "Dior Herbariomix Dashboard", titleWidth = 350),
sidebar,
body
)
server <- function(input, output) {
# Load Data upon URL Load
dat <- herbariomix_app %>%
select(Step, 'species completed', 'species remaining', 'specimens completed', 'specimens remaining')%>%
mutate(
SpeciesTotal = `species completed` + `species remaining`,
SpecimensTotal = `specimens completed` + `specimens remaining`,
SpeciesCompletedPercent = round((`species completed` / SpeciesTotal) * 100, 2),
SpeciesRemainingPercent = round((100 - SpeciesCompletedPercent), 2),
SpecimensCompletedPercent = round((`specimens completed` / SpecimensTotal) * 100, 2),
SpecimensRemainingPercent = round((100 - SpecimensCompletedPercent), 2)
)
# Get data table
output$data_table <- DT::renderDataTable({
DT::datatable(
dat,
options = list(pageLength = nrow(dat), scrollX = TRUE)
)
})
## Plots
# Function to create pie charts with percentages
create_pie_chart <- function(step, completed, remaining, completed_percent, remaining_percent, title){
pie_data <- data.frame(
Category = c("Completed", "Remaining"),
Count = c(completed, remaining),
Percentage = c(completed_percent, remaining_percent)
) %>%
mutate(Label = paste0(Category, ": ", round(Percentage, 1), "%"))
ggplot(pie_data, aes(x = "", y = Count, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_void() +
theme(
plot.margin = margin(0, 0, 0, 0, "cm"),
legend.position = "none"
) +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5)) +
scale_fill_manual(values = c("Completed" = "#ef8a62", "Remaining" = "#67a9cf"))
}
# Create lists to store the pie charts
species_pie_charts <- list()
specimens_pie_charts <- list()
# Create pie charts for each step
steps <- dat$Step
for (i in 1:length(steps)) {
step <- steps[i]
# Species Pie Charts
species_completed <- dat$`species completed`[i]
species_remaining <- dat$`species remaining`[i]
species_completed_percent <- dat$SpeciesCompletedPercent[i]
species_remaining_percent <- dat$SpeciesRemainingPercent[i]
species_title <- paste(step, "- Species")
species_pie_chart <- create_pie_chart(step, species_completed, species_remaining, species_completed_percent, species_remaining_percent, species_title)
species_pie_charts[[i]] <- species_pie_chart
# Specimens Pie Charts
specimens_completed <- dat$`specimens completed`[i]
specimens_remaining <- dat$`specimens remaining`[i]
specimens_completed_percent <- dat$SpecimensCompletedPercent[i]
specimens_remaining_percent <- dat$SpecimensRemainingPercent[i]
specimens_title <- paste(step, "- Specimens")
specimens_pie_chart <- create_pie_chart(step, specimens_completed, specimens_remaining, specimens_completed_percent, specimens_remaining_percent, specimens_title)
specimens_pie_charts[[i]] <- specimens_pie_chart
}
# Render the plots dynamically in the "Climb Demographics" tab
output$plots_ui_progress <- renderUI({
plot_output_list <- lapply(1:length(species_pie_charts), function(i) {
plotname <- paste("plot_climb", i, sep="")
box(
title = steps[i], status = "primary", solidHeader = TRUE, width = 6,
plotOutput(outputId = plotname, height = 400)
)
})
do.call(fluidRow, plot_output_list)
})
# Render the plots dynamically in the "Send Demographics" tab
output$plots_ui_send_demos <- renderUI({
plot_output_list <- lapply(1:length(specimens_pie_charts), function(i) {
plotname <- paste("plot_send", i, sep="")
box(
title = steps[i], status = "primary", solidHeader = TRUE, width = 6,
plotOutput(outputId = plotname, height = 400)
)
})
do.call(fluidRow, plot_output_list)
})
# Render each plot in the "Climb Demographics" tab
for (i in 1:length(species_pie_charts)) {
local({
my_i <- i
plotname <- paste("plot_climb", my_i, sep="")
output[[plotname]] <- renderPlot({
species_pie_charts[[my_i]]
})
})
}
# Render each plot in the "Send Demographics" tab
for (i in 1:length(specimens_pie_charts)) {
local({
my_i <- i
plotname <- paste("plot_send", my_i, sep="")
output[[plotname]] <- renderPlot({
specimens_pie_charts[[my_i]]
})
})
}
}
shinyApp(ui, server)
